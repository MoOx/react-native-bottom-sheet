{"version":3,"names":["React","useMemo","GESTURE_SOURCE","useGestureHandler","useBottomSheetInternal","useGestureEventsHandlersDefault","BottomSheetGestureHandlersContext","useSharedValue","BottomSheetGestureHandlersProvider","gestureEventsHandlersHook","useGestureEventsHandlers","children","animatedGestureSource","UNDETERMINED","animatedContentGestureState","animatedHandleGestureState","handleOnStart","handleOnChange","handleOnEnd","handleOnFinalize","contentPanGestureHandler","CONTENT","handlePanGestureHandler","HANDLE","contextValue"],"sources":["BottomSheetGestureHandlersProvider.tsx"],"sourcesContent":["import React, { useMemo } from 'react';\nimport { GESTURE_SOURCE } from '../../constants';\nimport {\n  useGestureHandler,\n  useBottomSheetInternal,\n  useGestureEventsHandlersDefault,\n} from '../../hooks';\nimport { BottomSheetGestureHandlersContext } from '../../contexts';\nimport type { BottomSheetGestureHandlersProviderProps } from './types';\nimport { useSharedValue } from 'react-native-reanimated';\n\nconst BottomSheetGestureHandlersProvider = ({\n  gestureEventsHandlersHook:\n    useGestureEventsHandlers = useGestureEventsHandlersDefault,\n  children,\n}: BottomSheetGestureHandlersProviderProps) => {\n  //#region variables\n  const animatedGestureSource = useSharedValue<GESTURE_SOURCE>(\n    GESTURE_SOURCE.UNDETERMINED\n  );\n  //#endregion\n\n  //#region hooks\n  const { animatedContentGestureState, animatedHandleGestureState } =\n    useBottomSheetInternal();\n  const { handleOnStart, handleOnChange, handleOnEnd, handleOnFinalize } =\n    useGestureEventsHandlers();\n  //#endregion\n\n  //#region gestures\n  const contentPanGestureHandler = useGestureHandler(\n    GESTURE_SOURCE.CONTENT,\n    animatedContentGestureState,\n    animatedGestureSource,\n    handleOnStart,\n    handleOnChange,\n    handleOnEnd,\n    handleOnFinalize\n  );\n\n  const handlePanGestureHandler = useGestureHandler(\n    GESTURE_SOURCE.HANDLE,\n    animatedHandleGestureState,\n    animatedGestureSource,\n    handleOnStart,\n    handleOnChange,\n    handleOnEnd,\n    handleOnFinalize\n  );\n  //#endregion\n\n  //#region context\n  const contextValue = useMemo(\n    () => ({\n      contentPanGestureHandler,\n      handlePanGestureHandler,\n      animatedGestureSource,\n    }),\n    [contentPanGestureHandler, handlePanGestureHandler, animatedGestureSource]\n  );\n  //#endregion\n  return (\n    <BottomSheetGestureHandlersContext.Provider value={contextValue}>\n      {children}\n    </BottomSheetGestureHandlersContext.Provider>\n  );\n};\n\nexport default BottomSheetGestureHandlersProvider;\n"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,SAASC,cAAT,QAA+B,iBAA/B;AACA,SACEC,iBADF,EAEEC,sBAFF,EAGEC,+BAHF,QAIO,aAJP;AAKA,SAASC,iCAAT,QAAkD,gBAAlD;AAEA,SAASC,cAAT,QAA+B,yBAA/B;;AAEA,MAAMC,kCAAkC,GAAG,QAII;EAAA,IAJH;IAC1CC,yBAAyB,EACvBC,wBAAwB,GAAGL,+BAFa;IAG1CM;EAH0C,CAIG;EAC7C;EACA,MAAMC,qBAAqB,GAAGL,cAAc,CAC1CL,cAAc,CAACW,YAD2B,CAA5C,CAF6C,CAK7C;EAEA;;EACA,MAAM;IAAEC,2BAAF;IAA+BC;EAA/B,IACJX,sBAAsB,EADxB;EAEA,MAAM;IAAEY,aAAF;IAAiBC,cAAjB;IAAiCC,WAAjC;IAA8CC;EAA9C,IACJT,wBAAwB,EAD1B,CAV6C,CAY7C;EAEA;;EACA,MAAMU,wBAAwB,GAAGjB,iBAAiB,CAChDD,cAAc,CAACmB,OADiC,EAEhDP,2BAFgD,EAGhDF,qBAHgD,EAIhDI,aAJgD,EAKhDC,cALgD,EAMhDC,WANgD,EAOhDC,gBAPgD,CAAlD;EAUA,MAAMG,uBAAuB,GAAGnB,iBAAiB,CAC/CD,cAAc,CAACqB,MADgC,EAE/CR,0BAF+C,EAG/CH,qBAH+C,EAI/CI,aAJ+C,EAK/CC,cAL+C,EAM/CC,WAN+C,EAO/CC,gBAP+C,CAAjD,CAzB6C,CAkC7C;EAEA;;EACA,MAAMK,YAAY,GAAGvB,OAAO,CAC1B,OAAO;IACLmB,wBADK;IAELE,uBAFK;IAGLV;EAHK,CAAP,CAD0B,EAM1B,CAACQ,wBAAD,EAA2BE,uBAA3B,EAAoDV,qBAApD,CAN0B,CAA5B,CArC6C,CA6C7C;;EACA,oBACE,oBAAC,iCAAD,CAAmC,QAAnC;IAA4C,KAAK,EAAEY;EAAnD,GACGb,QADH,CADF;AAKD,CAvDD;;AAyDA,eAAeH,kCAAf"}