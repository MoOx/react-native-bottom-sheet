{"version":3,"names":["useWorkletCallback","State","GESTURE_SOURCE","useGestureHandler","source","state","gestureSource","onStart","onChange","onEnd","onFinalize","handleOnStart","event","value","BEGAN","handleOnChange","handleOnEnd","UNDETERMINED","handleOnFinalize"],"sources":["useGestureHandler.ts"],"sourcesContent":["import Animated, { useWorkletCallback } from 'react-native-reanimated';\nimport {\n  State,\n  GestureStateChangeEvent,\n  PanGestureHandlerEventPayload,\n} from 'react-native-gesture-handler';\nimport { GESTURE_SOURCE } from '../constants';\nimport type {\n  GestureEventHandlerCallbackType,\n  GestureHandlersHookType,\n} from '../types';\n\nexport const useGestureHandler: GestureHandlersHookType = (\n  source: GESTURE_SOURCE,\n  state: Animated.SharedValue<State>,\n  gestureSource: Animated.SharedValue<GESTURE_SOURCE>,\n  onStart: GestureEventHandlerCallbackType,\n  onChange: GestureEventHandlerCallbackType,\n  onEnd: GestureEventHandlerCallbackType,\n  onFinalize: GestureEventHandlerCallbackType\n) => {\n  const handleOnStart = useWorkletCallback(\n    (event: GestureStateChangeEvent<PanGestureHandlerEventPayload>) => {\n      state.value = State.BEGAN;\n      gestureSource.value = source;\n\n      onStart(source, event);\n      return;\n    },\n    [state, gestureSource, source, onStart]\n  );\n\n  const handleOnChange = useWorkletCallback(\n    (event: GestureStateChangeEvent<PanGestureHandlerEventPayload>) => {\n      if (gestureSource.value !== source) {\n        return;\n      }\n\n      state.value = event.state;\n      onChange(source, event);\n    },\n    [state, gestureSource, source, onChange]\n  );\n\n  const handleOnEnd = useWorkletCallback(\n    (event: GestureStateChangeEvent<PanGestureHandlerEventPayload>) => {\n      if (gestureSource.value !== source) {\n        return;\n      }\n\n      state.value = event.state;\n      gestureSource.value = GESTURE_SOURCE.UNDETERMINED;\n\n      onEnd(source, event);\n    },\n    [state, gestureSource, source, onEnd]\n  );\n\n  const handleOnFinalize = useWorkletCallback(\n    (event: GestureStateChangeEvent<PanGestureHandlerEventPayload>) => {\n      if (gestureSource.value !== source) {\n        return;\n      }\n\n      state.value = event.state;\n      gestureSource.value = GESTURE_SOURCE.UNDETERMINED;\n\n      onFinalize(source, event);\n    },\n    [state, gestureSource, source, onFinalize]\n  );\n\n  return {\n    handleOnStart,\n    handleOnChange,\n    handleOnEnd,\n    handleOnFinalize,\n  };\n};\n"],"mappings":"AAAA,SAAmBA,kBAAnB,QAA6C,yBAA7C;AACA,SACEC,KADF,QAIO,8BAJP;AAKA,SAASC,cAAT,QAA+B,cAA/B;AAMA,OAAO,MAAMC,iBAA0C,GAAG,CACxDC,MADwD,EAExDC,KAFwD,EAGxDC,aAHwD,EAIxDC,OAJwD,EAKxDC,QALwD,EAMxDC,KANwD,EAOxDC,UAPwD,KAQrD;EACH,MAAMC,aAAa,GAAGX,kBAAkB,CACrCY,KAAD,IAAmE;IACjEP,KAAK,CAACQ,KAAN,GAAcZ,KAAK,CAACa,KAApB;IACAR,aAAa,CAACO,KAAd,GAAsBT,MAAtB;IAEAG,OAAO,CAACH,MAAD,EAASQ,KAAT,CAAP;IACA;EACD,CAPqC,EAQtC,CAACP,KAAD,EAAQC,aAAR,EAAuBF,MAAvB,EAA+BG,OAA/B,CARsC,CAAxC;EAWA,MAAMQ,cAAc,GAAGf,kBAAkB,CACtCY,KAAD,IAAmE;IACjE,IAAIN,aAAa,CAACO,KAAd,KAAwBT,MAA5B,EAAoC;MAClC;IACD;;IAEDC,KAAK,CAACQ,KAAN,GAAcD,KAAK,CAACP,KAApB;IACAG,QAAQ,CAACJ,MAAD,EAASQ,KAAT,CAAR;EACD,CARsC,EASvC,CAACP,KAAD,EAAQC,aAAR,EAAuBF,MAAvB,EAA+BI,QAA/B,CATuC,CAAzC;EAYA,MAAMQ,WAAW,GAAGhB,kBAAkB,CACnCY,KAAD,IAAmE;IACjE,IAAIN,aAAa,CAACO,KAAd,KAAwBT,MAA5B,EAAoC;MAClC;IACD;;IAEDC,KAAK,CAACQ,KAAN,GAAcD,KAAK,CAACP,KAApB;IACAC,aAAa,CAACO,KAAd,GAAsBX,cAAc,CAACe,YAArC;IAEAR,KAAK,CAACL,MAAD,EAASQ,KAAT,CAAL;EACD,CAVmC,EAWpC,CAACP,KAAD,EAAQC,aAAR,EAAuBF,MAAvB,EAA+BK,KAA/B,CAXoC,CAAtC;EAcA,MAAMS,gBAAgB,GAAGlB,kBAAkB,CACxCY,KAAD,IAAmE;IACjE,IAAIN,aAAa,CAACO,KAAd,KAAwBT,MAA5B,EAAoC;MAClC;IACD;;IAEDC,KAAK,CAACQ,KAAN,GAAcD,KAAK,CAACP,KAApB;IACAC,aAAa,CAACO,KAAd,GAAsBX,cAAc,CAACe,YAArC;IAEAP,UAAU,CAACN,MAAD,EAASQ,KAAT,CAAV;EACD,CAVwC,EAWzC,CAACP,KAAD,EAAQC,aAAR,EAAuBF,MAAvB,EAA+BM,UAA/B,CAXyC,CAA3C;EAcA,OAAO;IACLC,aADK;IAELI,cAFK;IAGLC,WAHK;IAILE;EAJK,CAAP;AAMD,CAlEM"}