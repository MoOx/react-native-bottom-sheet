{"version":3,"names":["useCallback","useRef","useSharedValue","getRefNativeTag","SCROLLABLE_STATE","SCROLLABLE_TYPE","useScrollable","scrollableRef","previousScrollableRef","animatedScrollableType","UNDETERMINED","animatedScrollableContentOffsetY","animatedScrollableOverrideState","isScrollableRefreshable","setScrollableRef","ref","currentRefId","current","id","removeScrollableRef"],"sources":["useScrollable.ts"],"sourcesContent":["import { useCallback, RefObject, useRef } from 'react';\nimport { useSharedValue } from 'react-native-reanimated';\nimport { getRefNativeTag } from '../utilities/getRefNativeTag';\nimport { SCROLLABLE_STATE, SCROLLABLE_TYPE } from '../constants';\nimport type { ScrollableRef, Scrollable } from '../types';\n\nexport const useScrollable = () => {\n  // refs\n  const scrollableRef = useRef<ScrollableRef>(null);\n  const previousScrollableRef = useRef<ScrollableRef>(null);\n\n  // variables\n  const animatedScrollableType = useSharedValue<SCROLLABLE_TYPE>(\n    SCROLLABLE_TYPE.UNDETERMINED\n  );\n  const animatedScrollableContentOffsetY = useSharedValue<number>(0);\n  const animatedScrollableOverrideState = useSharedValue<SCROLLABLE_STATE>(\n    SCROLLABLE_STATE.UNDETERMINED\n  );\n  const isScrollableRefreshable = useSharedValue<boolean>(false);\n\n  // callbacks\n  const setScrollableRef = useCallback((ref: ScrollableRef) => {\n    // get current node handle id\n    let currentRefId = scrollableRef.current?.id ?? null;\n\n    if (currentRefId !== ref.id) {\n      if (scrollableRef.current) {\n        // @ts-ignore\n        previousScrollableRef.current = scrollableRef.current;\n      }\n      // @ts-ignore\n      scrollableRef.current = ref;\n    }\n  }, []);\n\n  const removeScrollableRef = useCallback((ref: RefObject<Scrollable>) => {\n    // find node handle id\n    let id;\n    try {\n      id = getRefNativeTag(ref);\n    } catch {\n      return;\n    }\n\n    // get current node handle id\n    let currentRefId = scrollableRef.current?.id ?? null;\n\n    /**\n     * @DEV\n     * when the incoming node is actually the current node, we reset\n     * the current scrollable ref to the previous one.\n     */\n    if (id === currentRefId) {\n      // @ts-ignore\n      scrollableRef.current = previousScrollableRef.current;\n    }\n  }, []);\n\n  return {\n    scrollableRef,\n    animatedScrollableType,\n    animatedScrollableContentOffsetY,\n    animatedScrollableOverrideState,\n    isScrollableRefreshable,\n    setScrollableRef,\n    removeScrollableRef,\n  };\n};\n"],"mappings":"AAAA,SAASA,WAAT,EAAiCC,MAAjC,QAA+C,OAA/C;AACA,SAASC,cAAT,QAA+B,yBAA/B;AACA,SAASC,eAAT,QAAgC,8BAAhC;AACA,SAASC,gBAAT,EAA2BC,eAA3B,QAAkD,cAAlD;AAGA,OAAO,MAAMC,aAAa,GAAG,MAAM;EACjC;EACA,MAAMC,aAAa,GAAGN,MAAM,CAAgB,IAAhB,CAA5B;EACA,MAAMO,qBAAqB,GAAGP,MAAM,CAAgB,IAAhB,CAApC,CAHiC,CAKjC;;EACA,MAAMQ,sBAAsB,GAAGP,cAAc,CAC3CG,eAAe,CAACK,YAD2B,CAA7C;EAGA,MAAMC,gCAAgC,GAAGT,cAAc,CAAS,CAAT,CAAvD;EACA,MAAMU,+BAA+B,GAAGV,cAAc,CACpDE,gBAAgB,CAACM,YADmC,CAAtD;EAGA,MAAMG,uBAAuB,GAAGX,cAAc,CAAU,KAAV,CAA9C,CAbiC,CAejC;;EACA,MAAMY,gBAAgB,GAAGd,WAAW,CAAEe,GAAD,IAAwB;IAAA;;IAC3D;IACA,IAAIC,YAAY,GAAG,0BAAAT,aAAa,CAACU,OAAd,gFAAuBC,EAAvB,KAA6B,IAAhD;;IAEA,IAAIF,YAAY,KAAKD,GAAG,CAACG,EAAzB,EAA6B;MAC3B,IAAIX,aAAa,CAACU,OAAlB,EAA2B;QACzB;QACAT,qBAAqB,CAACS,OAAtB,GAAgCV,aAAa,CAACU,OAA9C;MACD,CAJ0B,CAK3B;;;MACAV,aAAa,CAACU,OAAd,GAAwBF,GAAxB;IACD;EACF,CAZmC,EAYjC,EAZiC,CAApC;EAcA,MAAMI,mBAAmB,GAAGnB,WAAW,CAAEe,GAAD,IAAgC;IAAA;;IACtE;IACA,IAAIG,EAAJ;;IACA,IAAI;MACFA,EAAE,GAAGf,eAAe,CAACY,GAAD,CAApB;IACD,CAFD,CAEE,MAAM;MACN;IACD,CAPqE,CAStE;;;IACA,IAAIC,YAAY,GAAG,2BAAAT,aAAa,CAACU,OAAd,kFAAuBC,EAAvB,KAA6B,IAAhD;IAEA;AACJ;AACA;AACA;AACA;;IACI,IAAIA,EAAE,KAAKF,YAAX,EAAyB;MACvB;MACAT,aAAa,CAACU,OAAd,GAAwBT,qBAAqB,CAACS,OAA9C;IACD;EACF,CArBsC,EAqBpC,EArBoC,CAAvC;EAuBA,OAAO;IACLV,aADK;IAELE,sBAFK;IAGLE,gCAHK;IAILC,+BAJK;IAKLC,uBALK;IAMLC,gBANK;IAOLK;EAPK,CAAP;AASD,CA9DM"}