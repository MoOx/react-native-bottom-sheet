{"version":3,"names":["validateSnapPoint","snapPoint","invariant","includes","Number","split"],"sources":["validateSnapPoint.ts"],"sourcesContent":["import invariant from 'invariant';\n\nexport const validateSnapPoint = (snapPoint: any) => {\n  invariant(\n    typeof snapPoint === 'number' || typeof snapPoint === 'string',\n    `'${snapPoint}' is not a valid snap point! expected types are string or number.`\n  );\n\n  invariant(\n    typeof snapPoint === 'number' ||\n      (typeof snapPoint === 'string' && snapPoint.includes('%')),\n    `'${snapPoint}' is not a valid percentage snap point! expected percentage snap point must include '%'. e.g. '50%'`\n  );\n\n  invariant(\n    typeof snapPoint === 'number' ||\n      (typeof snapPoint === 'string' && Number(snapPoint.split('%')[0])),\n    `'${snapPoint}' is not a valid percentage snap point! expected percentage snap point must be only numbers and '%'. e.g. '50%'`\n  );\n};\n"],"mappings":";;;;;;;AAAA;;;;AAEO,MAAMA,iBAAiB,GAAIC,SAAD,IAAoB;EACnD,IAAAC,kBAAA,EACE,OAAOD,SAAP,KAAqB,QAArB,IAAiC,OAAOA,SAAP,KAAqB,QADxD,EAEG,IAAGA,SAAU,mEAFhB;EAKA,IAAAC,kBAAA,EACE,OAAOD,SAAP,KAAqB,QAArB,IACG,OAAOA,SAAP,KAAqB,QAArB,IAAiCA,SAAS,CAACE,QAAV,CAAmB,GAAnB,CAFtC,EAGG,IAAGF,SAAU,qGAHhB;EAMA,IAAAC,kBAAA,EACE,OAAOD,SAAP,KAAqB,QAArB,IACG,OAAOA,SAAP,KAAqB,QAArB,IAAiCG,MAAM,CAACH,SAAS,CAACI,KAAV,CAAgB,GAAhB,EAAqB,CAArB,CAAD,CAF5C,EAGG,IAAGJ,SAAU,iHAHhB;AAKD,CAjBM"}