{"version":3,"names":["useScrollable","scrollableRef","useRef","previousScrollableRef","animatedScrollableType","useSharedValue","SCROLLABLE_TYPE","UNDETERMINED","animatedScrollableContentOffsetY","animatedScrollableOverrideState","SCROLLABLE_STATE","isScrollableRefreshable","setScrollableRef","useCallback","ref","currentRefId","current","id","removeScrollableRef","getRefNativeTag"],"sources":["useScrollable.ts"],"sourcesContent":["import { useCallback, RefObject, useRef } from 'react';\nimport { useSharedValue } from 'react-native-reanimated';\nimport { getRefNativeTag } from '../utilities/getRefNativeTag';\nimport { SCROLLABLE_STATE, SCROLLABLE_TYPE } from '../constants';\nimport type { ScrollableRef, Scrollable } from '../types';\n\nexport const useScrollable = () => {\n  // refs\n  const scrollableRef = useRef<ScrollableRef>(null);\n  const previousScrollableRef = useRef<ScrollableRef>(null);\n\n  // variables\n  const animatedScrollableType = useSharedValue<SCROLLABLE_TYPE>(\n    SCROLLABLE_TYPE.UNDETERMINED\n  );\n  const animatedScrollableContentOffsetY = useSharedValue<number>(0);\n  const animatedScrollableOverrideState = useSharedValue<SCROLLABLE_STATE>(\n    SCROLLABLE_STATE.UNDETERMINED\n  );\n  const isScrollableRefreshable = useSharedValue<boolean>(false);\n\n  // callbacks\n  const setScrollableRef = useCallback((ref: ScrollableRef) => {\n    // get current node handle id\n    let currentRefId = scrollableRef.current?.id ?? null;\n\n    if (currentRefId !== ref.id) {\n      if (scrollableRef.current) {\n        // @ts-ignore\n        previousScrollableRef.current = scrollableRef.current;\n      }\n      // @ts-ignore\n      scrollableRef.current = ref;\n    }\n  }, []);\n\n  const removeScrollableRef = useCallback((ref: RefObject<Scrollable>) => {\n    // find node handle id\n    let id;\n    try {\n      id = getRefNativeTag(ref);\n    } catch {\n      return;\n    }\n\n    // get current node handle id\n    let currentRefId = scrollableRef.current?.id ?? null;\n\n    /**\n     * @DEV\n     * when the incoming node is actually the current node, we reset\n     * the current scrollable ref to the previous one.\n     */\n    if (id === currentRefId) {\n      // @ts-ignore\n      scrollableRef.current = previousScrollableRef.current;\n    }\n  }, []);\n\n  return {\n    scrollableRef,\n    animatedScrollableType,\n    animatedScrollableContentOffsetY,\n    animatedScrollableOverrideState,\n    isScrollableRefreshable,\n    setScrollableRef,\n    removeScrollableRef,\n  };\n};\n"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAGO,MAAMA,aAAa,GAAG,MAAM;EACjC;EACA,MAAMC,aAAa,GAAG,IAAAC,aAAA,EAAsB,IAAtB,CAAtB;EACA,MAAMC,qBAAqB,GAAG,IAAAD,aAAA,EAAsB,IAAtB,CAA9B,CAHiC,CAKjC;;EACA,MAAME,sBAAsB,GAAG,IAAAC,qCAAA,EAC7BC,0BAAA,CAAgBC,YADa,CAA/B;EAGA,MAAMC,gCAAgC,GAAG,IAAAH,qCAAA,EAAuB,CAAvB,CAAzC;EACA,MAAMI,+BAA+B,GAAG,IAAAJ,qCAAA,EACtCK,2BAAA,CAAiBH,YADqB,CAAxC;EAGA,MAAMI,uBAAuB,GAAG,IAAAN,qCAAA,EAAwB,KAAxB,CAAhC,CAbiC,CAejC;;EACA,MAAMO,gBAAgB,GAAG,IAAAC,kBAAA,EAAaC,GAAD,IAAwB;IAAA;;IAC3D;IACA,IAAIC,YAAY,GAAG,0BAAAd,aAAa,CAACe,OAAd,gFAAuBC,EAAvB,KAA6B,IAAhD;;IAEA,IAAIF,YAAY,KAAKD,GAAG,CAACG,EAAzB,EAA6B;MAC3B,IAAIhB,aAAa,CAACe,OAAlB,EAA2B;QACzB;QACAb,qBAAqB,CAACa,OAAtB,GAAgCf,aAAa,CAACe,OAA9C;MACD,CAJ0B,CAK3B;;;MACAf,aAAa,CAACe,OAAd,GAAwBF,GAAxB;IACD;EACF,CAZwB,EAYtB,EAZsB,CAAzB;EAcA,MAAMI,mBAAmB,GAAG,IAAAL,kBAAA,EAAaC,GAAD,IAAgC;IAAA;;IACtE;IACA,IAAIG,EAAJ;;IACA,IAAI;MACFA,EAAE,GAAG,IAAAE,gCAAA,EAAgBL,GAAhB,CAAL;IACD,CAFD,CAEE,MAAM;MACN;IACD,CAPqE,CAStE;;;IACA,IAAIC,YAAY,GAAG,2BAAAd,aAAa,CAACe,OAAd,kFAAuBC,EAAvB,KAA6B,IAAhD;IAEA;AACJ;AACA;AACA;AACA;;IACI,IAAIA,EAAE,KAAKF,YAAX,EAAyB;MACvB;MACAd,aAAa,CAACe,OAAd,GAAwBb,qBAAqB,CAACa,OAA9C;IACD;EACF,CArB2B,EAqBzB,EArByB,CAA5B;EAuBA,OAAO;IACLf,aADK;IAELG,sBAFK;IAGLI,gCAHK;IAILC,+BAJK;IAKLE,uBALK;IAMLC,gBANK;IAOLM;EAPK,CAAP;AASD,CA9DM"}