{"version":3,"names":["useGestureHandler","source","state","gestureSource","onStart","onChange","onEnd","onFinalize","handleOnStart","useWorkletCallback","event","value","State","BEGAN","handleOnChange","handleOnEnd","GESTURE_SOURCE","UNDETERMINED","handleOnFinalize"],"sources":["useGestureHandler.ts"],"sourcesContent":["import Animated, { useWorkletCallback } from 'react-native-reanimated';\nimport {\n  State,\n  GestureStateChangeEvent,\n  PanGestureHandlerEventPayload,\n} from 'react-native-gesture-handler';\nimport { GESTURE_SOURCE } from '../constants';\nimport type {\n  GestureEventHandlerCallbackType,\n  GestureHandlersHookType,\n} from '../types';\n\nexport const useGestureHandler: GestureHandlersHookType = (\n  source: GESTURE_SOURCE,\n  state: Animated.SharedValue<State>,\n  gestureSource: Animated.SharedValue<GESTURE_SOURCE>,\n  onStart: GestureEventHandlerCallbackType,\n  onChange: GestureEventHandlerCallbackType,\n  onEnd: GestureEventHandlerCallbackType,\n  onFinalize: GestureEventHandlerCallbackType\n) => {\n  const handleOnStart = useWorkletCallback(\n    (event: GestureStateChangeEvent<PanGestureHandlerEventPayload>) => {\n      state.value = State.BEGAN;\n      gestureSource.value = source;\n\n      onStart(source, event);\n      return;\n    },\n    [state, gestureSource, source, onStart]\n  );\n\n  const handleOnChange = useWorkletCallback(\n    (event: GestureStateChangeEvent<PanGestureHandlerEventPayload>) => {\n      if (gestureSource.value !== source) {\n        return;\n      }\n\n      state.value = event.state;\n      onChange(source, event);\n    },\n    [state, gestureSource, source, onChange]\n  );\n\n  const handleOnEnd = useWorkletCallback(\n    (event: GestureStateChangeEvent<PanGestureHandlerEventPayload>) => {\n      if (gestureSource.value !== source) {\n        return;\n      }\n\n      state.value = event.state;\n      gestureSource.value = GESTURE_SOURCE.UNDETERMINED;\n\n      onEnd(source, event);\n    },\n    [state, gestureSource, source, onEnd]\n  );\n\n  const handleOnFinalize = useWorkletCallback(\n    (event: GestureStateChangeEvent<PanGestureHandlerEventPayload>) => {\n      if (gestureSource.value !== source) {\n        return;\n      }\n\n      state.value = event.state;\n      gestureSource.value = GESTURE_SOURCE.UNDETERMINED;\n\n      onFinalize(source, event);\n    },\n    [state, gestureSource, source, onFinalize]\n  );\n\n  return {\n    handleOnStart,\n    handleOnChange,\n    handleOnEnd,\n    handleOnFinalize,\n  };\n};\n"],"mappings":";;;;;;;AAAA;;AACA;;AAKA;;AAMO,MAAMA,iBAA0C,GAAG,CACxDC,MADwD,EAExDC,KAFwD,EAGxDC,aAHwD,EAIxDC,OAJwD,EAKxDC,QALwD,EAMxDC,KANwD,EAOxDC,UAPwD,KAQrD;EACH,MAAMC,aAAa,GAAG,IAAAC,yCAAA,EACnBC,KAAD,IAAmE;IACjER,KAAK,CAACS,KAAN,GAAcC,gCAAA,CAAMC,KAApB;IACAV,aAAa,CAACQ,KAAd,GAAsBV,MAAtB;IAEAG,OAAO,CAACH,MAAD,EAASS,KAAT,CAAP;IACA;EACD,CAPmB,EAQpB,CAACR,KAAD,EAAQC,aAAR,EAAuBF,MAAvB,EAA+BG,OAA/B,CARoB,CAAtB;EAWA,MAAMU,cAAc,GAAG,IAAAL,yCAAA,EACpBC,KAAD,IAAmE;IACjE,IAAIP,aAAa,CAACQ,KAAd,KAAwBV,MAA5B,EAAoC;MAClC;IACD;;IAEDC,KAAK,CAACS,KAAN,GAAcD,KAAK,CAACR,KAApB;IACAG,QAAQ,CAACJ,MAAD,EAASS,KAAT,CAAR;EACD,CARoB,EASrB,CAACR,KAAD,EAAQC,aAAR,EAAuBF,MAAvB,EAA+BI,QAA/B,CATqB,CAAvB;EAYA,MAAMU,WAAW,GAAG,IAAAN,yCAAA,EACjBC,KAAD,IAAmE;IACjE,IAAIP,aAAa,CAACQ,KAAd,KAAwBV,MAA5B,EAAoC;MAClC;IACD;;IAEDC,KAAK,CAACS,KAAN,GAAcD,KAAK,CAACR,KAApB;IACAC,aAAa,CAACQ,KAAd,GAAsBK,yBAAA,CAAeC,YAArC;IAEAX,KAAK,CAACL,MAAD,EAASS,KAAT,CAAL;EACD,CAViB,EAWlB,CAACR,KAAD,EAAQC,aAAR,EAAuBF,MAAvB,EAA+BK,KAA/B,CAXkB,CAApB;EAcA,MAAMY,gBAAgB,GAAG,IAAAT,yCAAA,EACtBC,KAAD,IAAmE;IACjE,IAAIP,aAAa,CAACQ,KAAd,KAAwBV,MAA5B,EAAoC;MAClC;IACD;;IAEDC,KAAK,CAACS,KAAN,GAAcD,KAAK,CAACR,KAApB;IACAC,aAAa,CAACQ,KAAd,GAAsBK,yBAAA,CAAeC,YAArC;IAEAV,UAAU,CAACN,MAAD,EAASS,KAAT,CAAV;EACD,CAVsB,EAWvB,CAACR,KAAD,EAAQC,aAAR,EAAuBF,MAAvB,EAA+BM,UAA/B,CAXuB,CAAzB;EAcA,OAAO;IACLC,aADK;IAELM,cAFK;IAGLC,WAHK;IAILG;EAJK,CAAP;AAMD,CAlEM"}